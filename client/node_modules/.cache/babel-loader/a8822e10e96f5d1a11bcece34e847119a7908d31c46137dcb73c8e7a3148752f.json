{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KALAIVANI\\\\Codearena\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\n// Suppress ResizeObserver loop errors (they are harmless)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst originalError = console.error;\nconsole.error = (...args) => {\n  const errorMessage = args[0];\n  if (errorMessage && typeof errorMessage === 'string') {\n    if (errorMessage.includes('ResizeObserver loop completed with undelivered notifications') || errorMessage.includes('ResizeObserver loop limit exceeded') || errorMessage.includes('ResizeObserver')) {\n      return; // Suppress ResizeObserver related errors\n    }\n  }\n  originalError.apply(console, args);\n};\n\n// Also suppress uncaught promise rejections related to ResizeObserver\nwindow.addEventListener('unhandledrejection', event => {\n  if (event.reason && typeof event.reason === 'string' && event.reason.includes('ResizeObserver')) {\n    event.preventDefault();\n    return;\n  }\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 30,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","originalError","console","error","args","errorMessage","includes","apply","window","addEventListener","event","reason","preventDefault","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/KALAIVANI/Codearena/client/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\n\r\n// Suppress ResizeObserver loop errors (they are harmless)\r\nconst originalError = console.error;\r\nconsole.error = (...args) => {\r\n  const errorMessage = args[0];\r\n  if (errorMessage && typeof errorMessage === 'string') {\r\n    if (errorMessage.includes('ResizeObserver loop completed with undelivered notifications') ||\r\n        errorMessage.includes('ResizeObserver loop limit exceeded') ||\r\n        errorMessage.includes('ResizeObserver')) {\r\n      return; // Suppress ResizeObserver related errors\r\n    }\r\n  }\r\n  originalError.apply(console, args);\r\n};\r\n\r\n// Also suppress uncaught promise rejections related to ResizeObserver\r\nwindow.addEventListener('unhandledrejection', (event) => {\r\n  if (event.reason && typeof event.reason === 'string' && \r\n      event.reason.includes('ResizeObserver')) {\r\n    event.preventDefault();\r\n    return;\r\n  }\r\n});\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n); "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;;AAEvB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAGC,OAAO,CAACC,KAAK;AACnCD,OAAO,CAACC,KAAK,GAAG,CAAC,GAAGC,IAAI,KAAK;EAC3B,MAAMC,YAAY,GAAGD,IAAI,CAAC,CAAC,CAAC;EAC5B,IAAIC,YAAY,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;IACpD,IAAIA,YAAY,CAACC,QAAQ,CAAC,8DAA8D,CAAC,IACrFD,YAAY,CAACC,QAAQ,CAAC,oCAAoC,CAAC,IAC3DD,YAAY,CAACC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;MAC3C,OAAO,CAAC;IACV;EACF;EACAL,aAAa,CAACM,KAAK,CAACL,OAAO,EAAEE,IAAI,CAAC;AACpC,CAAC;;AAED;AACAI,MAAM,CAACC,gBAAgB,CAAC,oBAAoB,EAAGC,KAAK,IAAK;EACvD,IAAIA,KAAK,CAACC,MAAM,IAAI,OAAOD,KAAK,CAACC,MAAM,KAAK,QAAQ,IAChDD,KAAK,CAACC,MAAM,CAACL,QAAQ,CAAC,gBAAgB,CAAC,EAAE;IAC3CI,KAAK,CAACE,cAAc,CAAC,CAAC;IACtB;EACF;AACF,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGhB,QAAQ,CAACiB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACTjB,OAAA,CAACJ,KAAK,CAACsB,UAAU;EAAAC,QAAA,eACfnB,OAAA,CAACF,GAAG;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE;AAAC;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OACS,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}